x<-1:3
y<-10:12
rbind(x,y)
cbind(x,y)
x<-1:6
dim(x)<-c(2,3)
x
x<- list(1,"a',TRUE,1+3i)
q()
q()
x
x
x<- factor(c("yes","yes","no","yes","no"))
x
table(x)
unclass(x)
y<-list(1,"abcd",TRUE,0+3i)
y
class(y)
class(y[1])
class(y[2])
class(y[12])
class(y(12))
x<- factor(c("yes","yes","no","yes","no"))
levels=c("yes","no")
x
x<- factor(c("yes","yes","no","yes","no"))
levels=c("yes","no"))
levels=c("yes","no")
x
x<- factor(c("yes","yes","no","yes","no"))
levels=c("no","yes")
x
x<- factor(c("yes","yes","no","yes","no"))
levels=c("yes","no")
x
x<- factor(c("yes","yes","no","yes","no"))
levels = c("yes","no")
x
m<- vector()
m
is.na(m)
m<-c(1,2,NA,3,4)
is.na(m)
is.nan(m)
m<-c(1,2,NAn,3,4)
m<-c(1,2,NAN,3,4)
m<-c(1,2,NaN,3,4)
is.nan(m)
x<-data.frame(foo 1:4 , bar<-c(TRUE,TRUE,FALSE,FALSE))
x<-data.frame(foo<- 1:4 , bar<-c(TRUE,TRUE,FALSE,FALSE))
X
x
x<-c(1,2,3)
x
names(x)
names(x)<-c('a','b','c')
x
names(a)
names(x)
x<-matrix(1:6,nrow=2,ncol=3)
names(X)
names(x)
names(x)<-list(c('a','b'),c('c','d','e'))
x
dimnames(x)<-list(c('a','b'),c('c','d','e'))
x
x
x<-matrix(1:6,nrow=2,ncol=3)
x[1,]
x[1, ,drop=FALSE]
x<-data.frame(foo 1:4 , bar<-c(TRUE,TRUE,FALSE,FALSE))
x<-data.frame(foo<- 1:4 , bar<-c(TRUE,TRUE,FALSE,FALSE))
X[[1]]
x[[1]]
x[2]
x[1,2]
x[[1,2]
x[1,2]q
x<-c(1,2,3,NA,4)
bad<-is.na(x)
x<-(!bad)
x
x[!bad]
x<-c(1,2,3,NA,4)
bad<-is.na(x)
x[!bad]
x<-c(1,2,3,NA,4,NA,5,7)
y<-c(34,12,NA,5654,734)
good<-complete.cases(x,y)
x<-c(1,2,3,NA,4,NA,5,7)
y<-c(34,12,NA,5654,734,67,12)
y<-c(34,12,NA,5654,734,67,12,24)
good<-complete.cases(x,y)
x[good]
y[good]
x<-3:10
x<-matrix(3:11,nrow=4,ncol=2)
x<-matrix(3:10,nrow=4,ncol=2)
x
y<-matrix(3:10,nrow=2,ncol=4)
y
x*y
z<-x+y
x<-matrix(3:10,nrow=4,ncol=2)
y<-matrix(3:10,nrow=4,ncol=2)
x*y
x%*%y
x %*% y
x<-matrix(3:10,nrow=4,ncol=2)
y<-matrix(3:10,nrow=2,ncol=4)
x %*% y
getwd()
read.csv("week1dataset.csv")
y<-read.csv("week1dataset.csv")
y[152:153]
y[152:153,]
y[18,]
y[57,]
y[47,]
good<-complete.cases(y)
y[good]
y[good,]
colSums (x, na.rm = TRUE, dims = 1)
colSums (x, na.rm = TRUE, dims = 4)
colSums (x, na.rm = TRUE, dims = 2)
colSums (x, na.rm = TRUE, dims = 1)
colMeans(x, na.rm = FALSE, dims = 1L, weights = NULL, freq = NULL,
n = NULL)
colMeans(x, na.rm = FALSE, dims = 1L)
colMeans(x, na.rm = FALSE, dims = 4L)
colMeans(x, na.rm = FALSE, dims = 3L)
colMeans(x, na.rm = FALSE, dims = 2L)
colMeans(x, na.rm = FALSE, dims = 1L)
colMeans(x, na.rm = FALSE, dims = 0L)
colMeans(x, na.rm = TRUE, dims = 1L)
z<-y[good,]
a<-z$ozone
a
a<-z$Ozone
a
mean(a)
a<-y[>31,,,=90]
a<-y[y$Ozone>31,y$Temp==90]
a<-y[y$Ozone>31,y$Temp==90]
a<-subset(y,Ozone>31 & Temp==90)
a
b<-a$Ozone
b
mean(b)
a<-a$Solar.R
B
b
mean(b)
a<-subset(y,Ozone>31 & Temp>90)
a
b<-a$Solar.R
b
mean(b)
a<-subset(y,Month=6)
b<-a$Temp
mean(b)
a<-subset(y,Month=5)
b<-a$Ozone
max(b)
v
b
good<-complete.cases(a)
b<-a[good,]
c<-b$Ozone
c
max(c)
good<-complete.cases(y)
a<-y[good,]
a
b<-subset(a,Month=5)
b
b<-subset(a,Month==5)
b
c<-b$Ozone
max(c)
a<-subset(y,Month==6)
b<-a$Temp
mean(b)
a
a<-y[good,]
a
a<-y$Ozone
good<-complete.cases(a)
a<-a[good,]
b<-a[good,]
b<-a[good, ]
a
good
b<-complete.cases(a)
b
con<-url("https://www.google.co.in/?gfe_rd=cr&ei=GPkzVMb3G4jC8gfJ24DYAw")
x<-readLines(con)
con<-url("https://http://www.gsmarena.com/")
x<-readLines(con)
a<-read.csv("week1dataset.csv")
a
b<-a$Ozone
bad<-is.na(a)
c<-b(!bad)
c<-b[!bad]
c
b
bad
c<-b[!bad]
c
c<-c[1:116]
c
mean(C)
d<-c
d
mean(d)
153-116
x=numeric()
x
class(C)
class(x)
x=matrix(,ncol=0,nrow=0)
x
class(c)
class(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(x)
mean(x)
makeCacheMatrix <- function(x = matrix(,ncol=0,nrow=0)) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(solve) m <<- solve
getmean <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix(,ncol=0,nrow=0)) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix(numeric(0),nrow= 0,ncol=0)) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
a<-makeCacheMatrix(c(1,2,3,4),nroe=2,ncol=2)
a<-makeCacheMatrix(c(1,2,3,4),nrow=2,ncol=2)
w <- ls()
rm(w, list = w)
setwd("C:\\Users\\HOME1\\OneDrive\\HBMO")
inp <-scan(file="hbmo1.txt")
strength <- inp[1]
parameters <- inp[2]
p_list <- inp[3:length(inp)]
w <- ls()
rm(w, list = w)
setwd("C:\\Users\\HOME1\\OneDrive\\HBMO")
inp <-scan(file="hbmo.txt")
strength <- inp[1]
parameters <- inp[2]
p_list <- inp[3:length(inp)]
w <- ls()
rm(w, list = w)
setwd("C:\\Users\\HOME1\\OneDrive\\HBMO")
inp <-scan(file="hbmo.txt")
strength <- inp[1]
parameters <- inp[2]
p_list <- inp[3:length(inp)]
x <- vector("list",0)
q <- 0;
for(i in 1:length(p_list)){
x <- append (x, list((length(unlist(x)) + 1):(q+p_list[i])))
q <- q + p_list[i]
}
w <- ls()
rm(w, list = w)
setwd("C:\\Users\\HOME1\\OneDrive\\HBMO")
inp <-scan(file="hbmo.txt")
strength <- inp[1]
parameters <- inp[2]
p_list <- inp[3:length(inp)]
x <- vector("list",0)
q <- 0;
for(i in 1:length(p_list)){
x <- append (x, list((length(unlist(x)) + 1):(q+p_list[i])))
q <- q + p_list[i]
}
n <- length(unlist(x))
cache <- matrix(rep(FALSE, n * n), ncol = n)
View(cache)
